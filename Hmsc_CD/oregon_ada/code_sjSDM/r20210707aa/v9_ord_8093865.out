> 
> # library(mvabund)
> # library(ecoCopula)
> library(raster)
> library(Rtsne)
> library(vegan)
> # library(dplyr)
> 
> # only on local
> # getwd()
> # wd <- here::here()
> # setwd(file.path(wd, "Hmsc_CD/oregon_ada"))
> 
> 
> ## On ADA
> ## getwd() will be "/gpfs/home/hsp20azu"
> # with folders Oregon, etc... 
> # setwd("J:/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
> # setwd("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
> 
> ## on ADA
> gis_out <- gis_in <- "data/gis"
> 
> ## local
> # gis_out <- "D:/CD/UEA/Oregon/gis/processed_gis_data"
> # gis_in <- "D:/CD/UEA/Oregon/gis/raw_gis_data"
> 
> # gis_out <- "J:/UEA/Oregon/gis/processed_gis_data"
> # gis_in <- "J:/UEA/Oregon/gis/raw_gis_data"
> 
> 
> baseFolder <- "code_sjSDM/r20210707aa"
> 
> resFolder <- file.path(baseFolder, "results")
> plotsFolder <- file.path(baseFolder, "plots")
> if(!dir.exists(plotsFolder)) dir.create(plotsFolder, recursive = TRUE)
> abund <- "pa"
> 
> # load model data - for species classification
> load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
> rm(env.vars, k, noSteps, vars, device, iter, sampling, otuenv)
> # otu.pa.csv, otu.qp.csv
> 
> 
> ## load species AUC resutls for filtering
> load(file.path(resFolder, "sp_test_results.rdata")) # # eval.results, sp.res.test, sp.res.train
> 
> 
> ## Mean AUC per species (and other eval metrics)
> str(sp.res.test, max.level = 1)
'data.frame':	190 obs. of  6 variables:
 $ ll   : num  -12.58 -8.71 -13.76 -4.43 -7.39 ...
 $ nagel: num  0.1373 0.1464 -0.6297 0.0631 -0.5478 ...
 $ plr  : num  1.98 1.52 1.16 1.46 0.13 ...
 $ tjur : num  0.1933 0.0581 0.0189 0.0293 -0.0818 ...
 $ cor  : num  0.3085 0.1914 0.0406 0.0625 -0.1767 ...
 $ auc  : num  0.744 0.852 0.519 0.793 0.276 ...
> head(sp.res.test$auc)
[1] 0.7440000 0.8518519 0.5185185 0.7931034 0.2758621 0.4711538
> 
> ## Filter species by auc
> auc.filt <- 0.70
> # threshold for presence absence data
> # tr <- 0.5
> 
> # how many species after AUC filter?
> sum(sp.res.test$auc > auc.filt, na.rm = T)
[1] 85
> 
> # incidence 
> incidence <- colSums(otu.pa.csv)/nrow(otu.pa.csv)
> 
> 
> load(file.path(resFolder, paste0("sjSDM_predictions_", "M1S1_", "min", minocc, "_", varsName, "_", abund, ".rdata"))) # pred.mn, pred.sd, 
> 
> ## local
> # load(file.path(gis_out, "r_oversize", paste0("sjSDM_predictions_", "M1S1_", "min", minocc, "_", varsName, "_", abund, ".rdata"))) 
> 
> dim(pred.mn)
[1] 247743    190
> 
> ## filter for species performance
> pred.in <- pred.mn[,sp.res.test$auc > auc.filt & !is.na(sp.res.test$auc)]
> dim(pred.in)
[1] 247743     85
> 
> 
> ## load raster templates
> load(file.path(gis_out, "templateRaster.rdata")) ## r, indNA aoi.pred.sf, r.aoi.pred - reduced area for plotting
> 
> rList <- lapply(data.frame(pred.in), function(x) {
+   
+   tmp <- r.msk
+   tmp[indNA] <- x
+   tmp
+   
+ })
> 
> # plot(tmp)
> rStack <- stack(rList)
> #names(rStack) <- spp.in$best.name
> rStack
class      : RasterStack 
dimensions : 596, 588, 350448, 85  (nrow, ncol, ncell, nlayers)
resolution : 30, 30  (x, y)
extent     : 554610, 572250, 4890750, 4908630  (xmin, xmax, ymin, ymax)
crs        : +proj=utm +zone=10 +datum=WGS84 +units=m +no_defs 
names      :           X1,           X2,           X3,           X4,           X5,           X6,           X7,           X8,           X9,          X10,          X11,          X12,          X13,          X14,          X15, ... 
min values : 5.000001e-07, 5.000001e-07, 5.000001e-07, 5.000001e-07, 5.000001e-07, 5.000001e-07, 7.949998e-04, 8.478517e-07, 5.000001e-07, 5.000001e-07, 5.000001e-07, 5.000001e-07, 5.000001e-07, 5.000001e-07, 5.000001e-07, ... 
max values :    0.9521188,    0.5775235,    0.7454723,    0.9490063,    0.7148177,    0.4587976,    0.9981671,    0.5744394,    0.6936122,    0.4398059,    0.7375422,    0.7284070,    0.6678015,    0.5137562,    0.5737428, ... 

> 
> # f <- 3
> f <- 5
> # f <- 10
> # f <- 50
> 
> # rStack.agg <- raster::aggregate(rStack, f)
> # rStack.agg
> # # plot(rStack.agg, 1)
> # 
> # pred.mod <- values(rStack.agg)
> # NAs <- complete.cases(pred.mod)
> # sum(NAs)
> # 
> # ## reduced data set
> # Xmat <- pred.mod[NAs, ]
> # r <- raster(rStack.agg)
> 
> ## Full data set
> Xmat <- pred.in
> r <- raster(rStack)
> NAs <- indNA
> 
> # pa version
> # Xmat <- (pred.mod[indNA2, ] >= tr)*1
> 
> 
> dim(Xmat)
[1] 247743     85
> Xmat[1:10, 1:10]
            [,1]       [,2]         [,3]       [,4]         [,5]       [,6]
 [1,] 0.70522578 0.02827364 5.395812e-05 0.06816651 1.378464e-02 0.03498478
 [2,] 0.63357717 0.04325947 1.757217e-04 0.07844381 1.839794e-02 0.05169232
 [3,] 0.34417561 0.05921629 8.173426e-04 0.08332487 5.586712e-03 0.05350505
 [4,] 0.07228319 0.07947247 6.902553e-04 0.09266934 5.516565e-05 0.02718982
 [5,] 0.11321241 0.26346085 4.679637e-02 0.48948961 6.599596e-05 0.05806376
 [6,] 0.20209441 0.39585190 2.020464e-01 0.69200633 5.361775e-04 0.11481854
 [7,] 0.30605575 0.36580654 3.090513e-01 0.72472981 2.871977e-03 0.19498524
 [8,] 0.36409096 0.30175980 2.922423e-01 0.68667009 4.442289e-03 0.20563634
 [9,] 0.70649296 0.01673859 3.219165e-06 0.04408200 5.017381e-03 0.02512120
[10,] 0.68255600 0.03133082 4.941762e-05 0.06952823 1.226868e-02 0.03818274
           [,7]       [,8]         [,9]        [,10]
 [1,] 0.1754216 0.35749468 3.058649e-01 0.2933845997
 [2,] 0.2095617 0.36410161 3.340540e-01 0.3352582932
 [3,] 0.3518882 0.31422345 3.285715e-01 0.3774478018
 [4,] 0.5031324 0.21622887 8.230715e-02 0.1747774780
 [5,] 0.6805284 0.10873171 7.014838e-04 0.0148435496
 [6,] 0.7286196 0.07835106 9.901786e-05 0.0050038923
 [7,] 0.7413287 0.05743015 3.404180e-05 0.0007156792
 [8,] 0.7205638 0.05127260 3.304956e-05 0.0002336444
 [9,] 0.1253321 0.36225857 2.851040e-01 0.2639629066
[10,] 0.1753603 0.36294841 3.130531e-01 0.3188481927
> 
> ## T SNE version
> # library(Rtsne)
> # ?Rtsne
> 
> # perplexity <- 30
> # 3 * perplexity < nrow(Xmat) - 1
> # 
> # N <- nrow(Xmat)
> # N^(1/2)
> 
> perplexity <- 500
> 
> 
> ## Initial PCA dimensions
> # https://towardsdatascience.com/how-to-tune-hyperparameters-of-tsne-7c0596a18868
> N_perm <- 10
> expl_var_perm <- matrix(NA, ncol = ncol(Xmat), nrow = N_perm)
> set.seed(0)
> 
> for(k in 1:N_perm) {
+   xmat_perm <- apply(Xmat,2,sample)
+   pca_perm <- vegan::rda(xmat_perm, scale=TRUE)
+   expl_var_perm[k,] <- vegan::eigenvals(pca_perm)/sum(vegan::eigenvals(pca_perm)) *100
+ }
> 
> rda <- vegan::rda(Xmat, scale=TRUE)
> expl_var <- vegan::eigenvals(rda)/sum(vegan::eigenvals(rda)) *100
> 
> pval <- apply(t(expl_var_perm) >= expl_var,1,sum) / N_perm
> 
> 
> pdf(file.path(plotsFolder, "N_dim_choice.pdf"), width = 8, height = 5)
> par(mfrow = c(2,1))
> 
> plot(expl_var[1:50]~seq(1:50), ylab="EXPLAINED VARIANCE",
+      col="darkgreen", type='o', xlab="PRINCIPAL COMPONENTS")
> lines(colMeans(expl_var_perm)[1:50]~seq(1:50),col="red")
> 
> legend("topright", c("Explained by PCS", "Explained by chance"),
+        fill=c("darkgreen","red"), inset=0.02)
> 
> plot(pval[1:50]~seq(1:50),col="darkred",type='o',
+      xlab="PRINCIPAL COMPONENTS",ylab="PVALUE")
> dev.off()
null device 
          1 
> 
> 
> i_dims <- head(which(pval>=0.05),1)-1
> i_dims
[1] 9
> 
> 
> # Max
> (nrow(Xmat) - 1)/3
[1] 82580.67
> 
> system.time(
+   tsne <- Rtsne::Rtsne(Xmat, dims = 2, perplexity = perplexity, initial_dims = i_dims,
+                        theta = 0.5, partial_pca = F, num_threads = 0) # don't think I'm using openMP??
+ )
    user   system  elapsed 
6998.240  131.644 2574.526 
> 
> # system.time(
> #   tsne <- Rtsne(Xmat, dims = 2, theta = 0.5, partial_pca = T, num_threads = 0)
> # )
> 
> # plot(tsne$Y, asp = 1, pch = ".")
> # str(tsne, max.level =1)
> # plot(tsne$Y, asp = 1)
> 
> 
> # library(vegan)
> 
> # system.time(
> #   pca <- rda(X = Xmat, scale = T)
> # )
> # 
> # str(pca, max.level = 1)
> # biplot(pca, pch = ".")
> # screeplot(pca)
> # round(cumsum(100*pca$CA$eig/sum(pca$CA$eig)),2)[1:10]
> # pca$CA$eig[1:15]
> 
> # plot(pca$Ybar[,1:2], asp = 1, pch = ".")
> 
> ## put site scores into raster
> makeR <- function(r, siteScores, NAs) {
+   
+   rSites <- raster(r)
+   rSites[] <- NA
+   rSites[NAs] <- siteScores
+   rSites
+   
+ }
> 
> rSites1 <- makeR(r, tsne$Y[,1], NAs)
> rSites2 <- makeR(r, tsne$Y[,2], NAs)
> 
> # plot(stack(rSites1, rSites2))
> # 
> # pcaR1 <- makeR(r, scores(pca, 1, "sites"), NAs)
> # pcaR2 <- makeR(r, scores(pca, 2, "sites"), NAs)
> # plot(stack(pcaR1, pcaR2))
> 
> # plot(stack(rSites1, rSites2,pcaR1, pcaR2))
> 
> 
> # ord.stck <- stack(rSites1, rSites2,pcaR1, pcaR2)
> # names(ord.stck) <- c("tsne1", "tsne2", "pca1", "pca2")
> # 
> # 
> # pdf(file.path(plotsFolder, "ord_plots.pdf"))
> # plot(ord.stck)
> # dev.off()
> 
> 
> save(tsne, r, rSites1, rSites2, NAs, file = file.path(resFolder, "ord_tsne_res.rdata"))
> 
> # 
> # save(r, f, indNA2, file = file.path(resFolder, "rast_template_data.rdata"))
> 
> 
> 
> # 
> # 
> # # make a pa matrix as mvabund object
> # pred.prob <- mvabund::mvabund(pred.mod[indNA2, ])
> # pred.pa <- mvabund::mvabund((pred.mod[indNA2, ] >= tr)*1)
> # 
> # pred.prob[1:10, 1:10]
> # pred.pa[1:10, 1:10]
> # 
> # dim(pred.pa)
> # # hist(log(colSums(pred.pa)))
> # 
> # 
> # #######
> # 
> # # do glm model
> # mod.pa <- mvabund::manyglm(pred.pa~1, family = binomial(link="cloglog"))
> # # mod.prob <- mvabund::manyany(pred.prob~1, family = binomial(link="cloglog"))
> # 
> # # do ordination
> # mod.pa.ord <- ecoCopula::cord(mod.pa)
> # 
> # # mod.prob.ord <- ecoCopula::cord(mod.prob)
> # 
> # # head(mod.prob.ord$scores)
> # # length(mod.prob.ord$scores[,"Factor1"])
> # 
> # 
> # # ## make site scores into raster
> # rSites.pa <- raster(rStack.agg)
> # rSites.pa[] <- NA
> # rSites.pa[indNA2] <- mod.pa.ord$scores[,"Factor1"]
> # rSites.pa
> # 
> # # plot(rSites.pa)
> # 
> # # # make into df for ggplot
> # # coords <- xyFromCell(rSites, seq_len(ncell(rSites)))
> # # df1 <- as.data.frame(values(rSites))
> # # df1 <- cbind(coords, df1)
> # 
> # # Species scores
> # # sp_res <- data.frame(mod.ord$loadings, species = colnames(dataN$otu.pa))
> # 
> # r <- raster(rStack.agg)
> # 
> # 
> # # save(mod.prob, mod.prob.ord, rSites.pa, file = file.path(resFolder, "ecocop_res_prob.rdata"))
> # save(mod.pa, mod.pa.ord, rSites.pa, r, f, indNA2, file = file.path(resFolder, "ecocop_res.rdata"))
> # 
> # save(r, f, indNA2, file = file.path(resFolder, "rast_template_data.rdata"))
> 
