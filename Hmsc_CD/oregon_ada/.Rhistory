findSQ(x,y)
x <- 1:10/2
x <- 1:10*2
y <- 1:25
x <- 1:10*2
findSQ(x,y)
findSQ(1:100, 1:100)
x <- 1:25
y <- 1:25
findSQ(x,y)
x <- 1:30
y <- 1:30
findSQ(x,y)
findSQ <- function(x, y){
#m1 <- m2 <- x%o%y
m1 <- m2 <- matrix(NA, nrow = length(x), ncol = length(y), dimnames = list(x, y))
for(i in seq_along(x)){
for(j in seq_along(y)) {
z <- x[i]^2 + y[j]^2
m1[i,j] <- (sqrt(z) %% 1) == 0
m2[i,j] <- z
}
}
#list(m1,m2)
# m3 <- m1 * m2
# m3[m3 == 0] <- NA
# m3
m1 * m2
}
x <- 1:30
y <- 1:30
findSQ(x,y)
16+9
x <- 1:10*2
y <- 1:25
findSQ(x,y)
dist
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian"), 3)
sample(c("Tom", "Diana", "Christian", "Mary"), 1)
library(MASS)
dnorm(10, mean = 0, sd = 1)
dnorm(0, mean = 0, sd = 1)
dnorm(0, mean = 0, sd = 1)
pnorm(0, mean = 0, sd = 1)
pnorm(10000, mean = 0, sd = 1)
pnorm(-1, mean = 0, sd = 1)
pnorm(-1, mean = 0, sd = 1)
library(MASS)
mvrnorm()
pnorm(-1, mean = 0, sd = 1)
samples_list = c(5,100)
thin_list = c(1,5)
nChains <- 4
# iterations per chain
(samples_list * thin_list) + ceiling(0.5*thin_list*samples_list)
samples_list = c(5,250,250,250,250,250)
thin_list = c(1,1,10,100,1000,10000)
# iterations per chain
(samples_list * thin_list) + ceiling(0.5*thin_list*samples_list)
samples_list = c(5,250,250)
thin_list = c(1,10,100)
## samples_list = c(5,100)
## thin_list = c(1,5)
nChains <- 4
# iterations per chain
(samples_list * thin_list) + ceiling(0.5*thin_list*samples_list)
samples_list = c(50,250,250)
thin_list = c(1,10,50)
## samples_list = c(5,100)
## thin_list = c(1,5)
nChains <- 4
# iterations per chain
(samples_list * thin_list) + ceiling(0.5*thin_list*samples_list)
thin_list = c(1,10,20)
## samples_list = c(5,100)
## thin_list = c(1,5)
nChains <- 4
# iterations per chain
(samples_list * thin_list) + ceiling(0.5*thin_list*samples_list)
samples_list = c(50,250)
thin_list = c(1,10)
## samples_list = c(5,100)
## thin_list = c(1,5)
nChains <- 4
# iterations per chain
(samples_list * thin_list) + ceiling(0.5*thin_list*samples_list)
samples_list = c(50,200)
thin_list = c(1,10)
## samples_list = c(5,100)
## thin_list = c(1,5)
nChains <- 4
# iterations per chain
(samples_list * thin_list) + ceiling(0.5*thin_list*samples_list)
setwd("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
library(dplyr)
resFolder <-"code_sjSDM/r20210616a/results"
abund <- "pa"
## load model data
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
dir(resFolder)
resFolder <-"code_sjSDM/r20210616a/results"
abund <- "pa"
## load model data
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
head(env.vars)
dir(resFolder)
resFolder <-"code_sjSDM/r20210610a/results"
abund <- "pa"
dir(resFolder)
## load model data
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
head(env.vars)
## load model data
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
setwd("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada)
resFolder <-"code_sjSDM/r20210610a/results"
abund <- "pa"
dir(resFolder)
resFolder <-"code_sjSDM/r20210610a/results"
abund <- "pa"
dir(resFolder)
## load model data
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
head(env.vars)
res <- read.csv(file.path(resFolder,paste0("manual_tuning_sjsdm_", varsName, "_", k, "CV_", spChoose,
"_meanEVAL_",
abund,
"_min",
minocc,
"_nSteps",
noSteps,
".csv")))
head(res)
res.best <- res[which.max(res$AUC.test_mean),,drop = T]
res.best
rm(res)
setwd("J:/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
library(mvabund)
library(ecoCopula)
gis_out <- "J:/UEA/Oregon/gis/processed_gis_data"
baseFolder <- "code_sjSDM/r20210610a"
resFolder <- file.path(baseFolder, "results")
plotsFolder <- file.path(baseFolder, "plots")
setwd("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
baseFolder <- "code_sjSDM/r20210610a"
resFolder <- file.path(baseFolder, "results")
plotsFolder <- file.path(baseFolder, "plots")
abund <- "pa"
# load model data - for species classification
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
rm(env.vars, k, noSteps, vars, device, iter, sampling, otuenv)
## load species AUC resutls for filtering
load(file.path(resFolder, "sp_results.rdata")) # sp.mn.test
rm(eval.results, sp.mn.train, sp.res.test, sp.res.train)
## Mean AUC per species (and other eval metrics)
str(sp.mn.test, max.level = 1)
head(sp.mn.test$auc)
## Filter species by auc
auc.filt <- 0.65
# threshold for presence absence data
tr <- 0.5
# how many species after AUC filter?
sum(sp.mn.test$auc > auc.filt)
# incidence
incidence <- colSums(otu.pa.csv)/nrow(otu.pa.csv)
load(file.path(gis_out, "r_oversize", paste0("sjSDM_predictions_", "M1S1_", "min", minocc, "_", varsName, "_", abund, ".rdata")))
gis_out <- "D:/CD/UEA/Oregon/gis/processed_gis_data"
load(file.path(gis_out, "r_oversize", paste0("sjSDM_predictions_", "M1S1_", "min", minocc, "_", varsName, "_", abund, ".rdata")))
dim(pred.mn)
## filter for species performance
pred.in <- pred.mn[,sp.mn.test$auc > auc.filt]
dim(pred.in)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.in)
library(mvabund)
install.packages("mvabund")
install.packages("ecoCopula")
library(mvabund)
library(ecoCopula)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.in)
pred.pa <- mvabund::mvabund((pred.in >= tr)*1)
# pred.prob[1:10, 1:10]
pred.pa[1:10, 1:10]
hist(log(colSums(pred.pa)))
pred.prob[1:10, 1:10]
## testing
ns <- 1:nrow(pred.in)
setwd("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
library(mvabund)
library(ecoCopula)
gis_out <- "D:/CD/UEA/Oregon/gis/processed_gis_data"
baseFolder <- "code_sjSDM/r20210610a"
resFolder <- file.path(baseFolder, "results")
plotsFolder <- file.path(baseFolder, "plots")
if(!dir.exists(plotsFolder)) dir.create(plotsFolder, recursive = TRUE)
abund <- "pa"
# load model data - for species classification
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
rm(env.vars, k, noSteps, vars, device, iter, sampling, otuenv)
## load species AUC resutls for filtering
load(file.path(resFolder, "sp_results.rdata")) # sp.mn.test
rm(eval.results, sp.mn.train, sp.res.test, sp.res.train)
## Mean AUC per species (and other eval metrics)
str(sp.mn.test, max.level = 1)
head(sp.mn.test$auc)
## Filter species by auc
auc.filt <- 0.65
# threshold for presence absence data
tr <- 0.5
# how many species after AUC filter?
sum(sp.mn.test$auc > auc.filt)
# incidence
incidence <- colSums(otu.pa.csv)/nrow(otu.pa.csv)
load(file.path(resFolder, paste0("sjSDM_predictions_", "M1S1_", "min", minocc, "_", varsName, "_", abund, ".rdata"))) # pred.mn, pred.sd,
load(file.path(gis_out, "r_oversize", paste0("sjSDM_predictions_", "M1S1_", "min", minocc, "_", varsName, "_", abund, ".rdata")))
## filter for species performance
pred.in <- pred.mn[,sp.mn.test$auc > auc.filt]
dim(pred.in)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.in)
pred.pa <- mvabund::mvabund((pred.in >= tr)*1)
# reduce data set for testing
smp <- 1:nrow(pred.in)
# reduce data set for testing
smp <- 1:nrow(pred.in) %/%100
# reduce data set for testing
smp <- 1:nrow(pred.in)
1:50 %% 5
1:50 %/% 5
smp <- 1:50
seq(1, length(smp), 5)
smp <- seq(1, nrow(pred.in), rFact)
smp <- seq(1, nrow(pred.in), rFact)
# reduce data set for testing
rFact <- 100
smp <- seq(1, nrow(pred.in), rFact)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.in)
pred.in <- pred.in[smp, ]
dim(pred.in)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.in)
pred.pa <- mvabund::mvabund((pred.in >= tr)*1)
pred.prob[1:10, 1:10]
pred.pa[1:10, 1:10]
# do glm model
mod.pa <- mvabund::manyglm(pred.pa~1, family = binomial(link="cloglog"))
# do ordination
mod.pa.ord <- ecoCopula::cord(mod.pa)
# reduce data set for testing
rFact <- 1000
## filter for species performance
pred.in <- pred.mn[,sp.mn.test$auc > auc.filt]
dim(pred.in)
# reduce data set for testing
rFact <- 1000
smp <- seq(1, nrow(pred.in), rFact)
pred.mod <- pred.in[smp, ]
dim(pred.mod)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.mod)
pred.pa <- mvabund::mvabund((pred.mod >= tr)*1)
pred.prob[1:10, 1:10]
pred.pa[1:10, 1:10]
# do glm model
mod.pa <- mvabund::manyglm(pred.pa~1, family = binomial(link="cloglog"))
mod.prob <- mvabund::manyglm(pred.prob~1, family = binomial(link="cloglog"))
# do ordination
mod.pa.ord <- ecoCopula::cord(mod.pa)
## load raster templates
load(file.path(gis_out, "templateRaster.rdata")) ## r, indNA aoi.pred.sf, r.aoi.pred - reduced area for plotting
library(raster)
install.packages("raster")
library(raster)
## load raster templates
load(file.path(gis_out, "templateRaster.rdata")) ## r, indNA aoi.pred.sf, r.aoi.pred - reduced area for plotting
# ## make site scores into raster
rSites.pa <- r.msk
rSites.pa[indNA][smp] <- mod.pa.ord$scores[,"Factor1"]
rSites.pa
plot(rSites.pa)
# ## make site scores into raster
rSites.pa <- raster(r.msk)
rSites.pa[indNA][smp] <- mod.pa.ord$scores[,"Factor1"]
rSites.pa[] <- NA
rSites.pa[indNA][smp] <- mod.pa.ord$scores[,"Factor1"]
rSites.pa
plot(rSites.pa)
# ## make site scores into raster
rSites.pa <- r.msk
rSites.pa
rSites.pa[indNA] <- pred.in
dim(pred.in)
# ## make site scores into raster
rSites.pa <- r.msk
rSites.pa
indNA
sum(indNA)
spp <- data.frame(species = colnames(get(paste0("otu.", abund, ".csv")))) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_", convert = TRUE) %>%  ## creates real NAs with convert = T
mutate(best.name = case_when(is.na(epithet) & is.na(genus) & is.na(family) & is.na(order) ~ class,
is.na(epithet) & is.na(genus) & is.na(family) ~ order,
is.na(epithet) & is.na(genus) ~ family,
is.na(epithet) ~ genus,
TRUE ~ paste(genus, epithet, sep = "_")
)) %>%
dplyr::select(-empty)%>%
mutate(auc = sp.mn.test$auc,
incidence = incidence)
head(spp)
library(dplyr)
install.packages("dplyr")
spp <- data.frame(species = colnames(get(paste0("otu.", abund, ".csv")))) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_", convert = TRUE) %>%  ## creates real NAs with convert = T
mutate(best.name = case_when(is.na(epithet) & is.na(genus) & is.na(family) & is.na(order) ~ class,
is.na(epithet) & is.na(genus) & is.na(family) ~ order,
is.na(epithet) & is.na(genus) ~ family,
is.na(epithet) ~ genus,
TRUE ~ paste(genus, epithet, sep = "_")
)) %>%
dplyr::select(-empty)%>%
mutate(auc = sp.mn.test$auc,
incidence = incidence)
library(dplyr)
spp <- data.frame(species = colnames(get(paste0("otu.", abund, ".csv")))) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_", convert = TRUE) %>%  ## creates real NAs with convert = T
mutate(best.name = case_when(is.na(epithet) & is.na(genus) & is.na(family) & is.na(order) ~ class,
is.na(epithet) & is.na(genus) & is.na(family) ~ order,
is.na(epithet) & is.na(genus) ~ family,
is.na(epithet) ~ genus,
TRUE ~ paste(genus, epithet, sep = "_")
)) %>%
dplyr::select(-empty)%>%
mutate(auc = sp.mn.test$auc,
incidence = incidence)
install.packages("tidyr")
spp <- data.frame(species = colnames(get(paste0("otu.", abund, ".csv")))) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_", convert = TRUE) %>%  ## creates real NAs with convert = T
mutate(best.name = case_when(is.na(epithet) & is.na(genus) & is.na(family) & is.na(order) ~ class,
is.na(epithet) & is.na(genus) & is.na(family) ~ order,
is.na(epithet) & is.na(genus) ~ family,
is.na(epithet) ~ genus,
TRUE ~ paste(genus, epithet, sep = "_")
spp <- data.frame(species = colnames(get(paste0("otu.", abund, ".csv")))) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_", convert = TRUE) %>%  ## creates real NAs with convert = T
mutate(best.name = case_when(is.na(epithet) & is.na(genus) & is.na(family) & is.na(order) ~ class,
is.na(epithet) & is.na(genus) & is.na(family) ~ order,
is.na(epithet) & is.na(genus) ~ family,
is.na(epithet) ~ genus,
TRUE ~ paste(genus, epithet, sep = "_")
)) %>%
dplyr::select(-empty)%>%
mutate(auc = sp.mn.test$auc,
incidence = incidence)
head(spp)
spp <- data.frame(species = colnames(get(paste0("otu.", abund, ".csv")))) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_", convert = TRUE) %>%  ## creates real NAs with convert = T
mutate(best.name = case_when(is.na(epithet) & is.na(genus) & is.na(family) & is.na(order) ~ class,
is.na(epithet) & is.na(genus) & is.na(family) ~ order,
is.na(epithet) & is.na(genus) ~ family,
is.na(epithet) ~ genus,
TRUE ~ paste(genus, epithet, sep = "_")
)) %>%
dplyr::select(-empty)%>%
mutate(auc = sp.mn.test$auc,
incidence = incidence)
head(spp)
sum(is.na(spp$best.name))
sum(grepl("NA_NA", spp$best.name))
head(spp, 30)
sum(is.na(spp$family))
## filter for species performance
pred.in <- pred.mn[,sp.mn.test$auc > auc.filt]
dim(pred.in)
## get species names too
spp.in <- spp[sp.mn.test$auc > auc.filt, ]
head(spp.in)
rList <- lapply(data.frame(pred.in), function(x) {
tmp <- r.msk
tmp[indNA] <- x
tmp
})
rStack <- stack(rList)
names(rStack) <- spp.in$best.name
rStack
432955/9
661*655
432955/9
48106/655
rStack.agg <- raster::aggregate(rStack, 5)
rStack.agg
vals <- values(rStack.agg)
indNA2 <- complete.cases(vals)
sum(indNA2)
plot(rStack.agg, 1)
f <- 10
rStack.agg <- raster::aggregate(rStack, f)
rStack.agg
vals <- values(rStack.agg)
indNA2 <- complete.cases(vals)
sum(indNA2)
plot(rStack.agg, 1)
pred.mod <- values(rStack.agg)
indNA2 <- complete.cases(pred.mod)
sum(indNA2)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.mod[indNA2, ])
pred.pa <- mvabund::mvabund((pred.mod[indNA2, ] >= tr)*1)
pred.prob[1:10, 1:10]
pred.pa[1:10, 1:10]
dim(pred.pa)
f <- 50
rStack.agg <- raster::aggregate(rStack, f)
rStack.agg
plot(rStack.agg, 1)
pred.mod <- values(rStack.agg)
indNA2 <- complete.cases(pred.mod)
sum(indNA2)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.mod[indNA2, ])
pred.pa <- mvabund::mvabund((pred.mod[indNA2, ] >= tr)*1)
pred.prob[1:10, 1:10]
pred.pa[1:10, 1:10]
hist(log(colSums(pred.pa)))
# do glm model
mod.pa <- mvabund::manyglm(pred.pa~1, family = binomial(link="cloglog"))
# do ordination
mod.pa.ord <- ecoCopula::cord(mod.pa)
# ## make site scores into raster
rSites.pa <- raster(rStack.agg)
rSites.pa[] <- NA
rSites.pa[indNA2] <- mod.pa.ord$scores[,"Factor1"]
rSites.pa
plot(rSites.pa)
f <- 10
rStack.agg <- raster::aggregate(rStack, f)
rStack.agg
pred.mod <- values(rStack.agg)
indNA2 <- complete.cases(pred.mod)
sum(indNA2)
install.packages("ggplot2")
install.packages("sf")
f <- 10
rStack.agg <- raster::aggregate(rStack, f)
rStack.agg
pred.mod <- values(rStack.agg)
indNA2 <- complete.cases(pred.mod)
sum(indNA2)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.mod[indNA2, ])
pred.pa <- mvabund::mvabund((pred.mod[indNA2, ] >= tr)*1)
pred.prob[1:10, 1:10]
pred.pa[1:10, 1:10]
dim(pred.pa)
f <- 5
rStack.agg <- raster::aggregate(rStack, f)
rStack.agg
pred.mod <- values(rStack.agg)
indNA2 <- complete.cases(pred.mod)
sum(indNA2)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.mod[indNA2, ])
pred.pa <- mvabund::mvabund((pred.mod[indNA2, ] >= tr)*1)
pred.prob[1:10, 1:10]
pred.pa[1:10, 1:10]
dim(pred.pa)
load("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada/code_sJSDM/r20210610a/results/ecocop_res_f10.rdata")
plot(rSites.pa)
f <- 3
rStack.agg <- raster::aggregate(rStack, f)
rStack.agg
pred.mod <- values(rStack.agg)
indNA2 <- complete.cases(pred.mod)
sum(indNA2)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
