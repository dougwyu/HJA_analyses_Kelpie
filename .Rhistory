plot(r, axes = F, legend = F)
text(r)
plot(f1, axes = F, legend = F)
text(f1, digits = 2)
plot(r, axes = F, legend = F)
text(r)
mean(c(1,1,0))
sum(c(1,1,0))/9
sum(c(1,1,0))/4 # the other 5 cells are NA
f2 <- focal(r, w = w2, pad = T, padValue = 0)
plot(f2, axes = F, legend = F)
text(f2, digits = 2)
plot(r, axes = F, legend = F)
text(r)
f3 <- focal(r, w = w1, fun = function(x, ...) sum(x) / sum(!is.na(x)), na.rm = T, pad = T)
plot(f3, axes = F, legend = F)
text(f3, digits = 2)
plot(r, axes = F, legend = F)
text(r)
f3 <- focal(r, w = w1, fun = function(x, ...) sum(x, na.rm = na.rm) / sum(!is.na(x)), na.rm = T, pad = T)
f3 <- focal(r, w = w1, fun = function(x, ...) sum(x, ...) / sum(!is.na(x)), na.rm = T, pad = T)
plot(f3, axes = F, legend = F)
text(f3, digits = 2)
plot(r, axes = F, legend = F)
text(r)
w3[w3 == 0] <- NA
w3 <- ifelse(focalWeight(r, 10, type = "circle") > 0, 1, NA)
w3
f3 <- focal(r, w = w3, fun = function(x, ...) sum(x, ...) / sum(!is.na(x)), na.rm = T, pad = T)
plot(f3, axes = F, legend = F)
text(f3, digits = 2)
plot(r, axes = F, legend = F)
text(r)
f3 <- focal(r, w = w3, fun = function(x, ...) sum(x, ...) / sum(!is.na(x), ...), na.rm = T, pad = T)
plot(f3, axes = F, legend = F)
text(f3, digits = 2)
plot(r, axes = F, legend = F)
text(r)
f3 <- focal(r, w = w3, fun = mean, na.rm = T, pad = T)
f4 <- focal(r, w = w3, fun = mean, na.rm = T, pad = T)
f4
f4 <- focal(r, w = w1, fun = mean, na.rm = T, pad = T)
f4
plot(f4, axes = F, legend = F)
text(f4, digits = 2)
plot(r, axes = F, legend = F)
text(r)
f4 <- focal(r, w = w3, fun = mean, na.rm = T, pad = T)
f4
plot(f4, axes = F, legend = F)
text(f4, digits = 2)
plot(r, axes = F, legend = F)
text(r)
f5 <- focal(r, w = w1, fun = mean, na.rm = T, pad = T)
plot(f5, axes = F, legend = F)
text(f5, digits = 2)
plot(r, axes = F, legend = F)
text(r)
f3 <- focal(r, w = w3, fun = function(x, ...) sum(x, ...) / sum(!is.na(x), ...), na.rm = T, pad = T)
plot(f3, axes = F, legend = F)
text(f3, digits = 2)
plot(r, axes = F, legend = F)
text(r)
mean(c(1,1,0))
mean(c(0,1,1,0,1))
mean(c(1,0,1,0)) # cell 2
f4 <- focal(r, w = w3, na.rm = T, pad = T)
f4
r1k <- ifelse(focalWeight(r30, d = 1000, type = "circle")>0, 1, NA)
sum(r1k)
sum(r1k, na.rm = T)
r500m <- ifelse(focalWeight(r30, d = 500, type = "circle")>0, 1, NA)
r1k <- ifelse(focalWeight(r30, d = 1000, type = "circle")>0, 1, NA)
sum(r1k, na.rm = T)
r500m <- ifelse(focalWeight(r30, d = 500, type = "circle")>0, 1, NA)
r250m <- ifelse(focalWeight(r30, d = 250, type = "circle")>0, 1, NA)
r100m <- ifelse(focalWeight(r30, d = 100, type = "circle")>0, 1, NA)
cut.r1k <- focal(cut.msk, w = r1k, fun = f3, na.rm = TRUE, pad = TRUE)
cut.r500 <- focal(cut.msk, w = r500m, fun = f3, na.rm = TRUE, pad = TRUE)
cut.r250 <- focal(cut.msk, w = r250m, fun = mean, na.rm = T, pad = T)
f3 <- function(x, ...) sum(x, ...)/sum(!is.na(x), ...) # na.rm is carried through from focal function
cut.r1k <- focal(cut.msk, w = r1k, fun = f3, na.rm = TRUE, pad = TRUE)
cut.r500 <- focal(cut.msk, w = r500m, fun = f3, na.rm = TRUE, pad = TRUE)
cut.r250 <- focal(cut.msk, w = r250m, fun = f3, na.rm = T, pad = T)
cut40.r1k <- focal(cut.40msk, w = r1k, fun = f3, na.rm = TRUE, pad = TRUE)
cut40.r500 <- focal(cut.40msk, w = r500m, fun = f3, na.rm = TRUE, pad = TRUE)
cut40.r250 <- focal(cut.40msk, w = r250m, fun = f3, na.rm = TRUE, pad = TRUE)
plot(stack(cut.r1k, cut.r500, cut.r250, cut40.r1k, cut40.r500, cut40.r250), colNA = "black")
cutStack <- stack(cut.r, cut.msk, cut.40msk,
cut.r1k, cut.r500, cut.r250,
cut40.r1k, cut40.r500, cut40.r250)
cut.names <- c("cut_r", "cut_msk", "cut_40msk",
"cut_r1k", "cut_r500", "cut_r250",
"cut40_r1k", "cut40_r500", "cut40_r250")
names(cutStack) <- cut.names
save(cutStack, cut.names, file = file.path(gis_out, "cut_stack.rdata"))
writeRaster(cutStack, bylayer = T,
filename = file.path(gis_out, "r_utm/disturb.tif"), suffix = "names", overwrite = TRUE)
rm(cut.r, cut.msk, cut.40msk,
cut.r1k, cut.r500, cut.r250,
cut40.r1k, cut40.r500, cut40.r250)
be_r30
terr <- raster::terrain(be_r30, opt = c("slope", "aspect", "TRI"), unit= "degrees")
terr
Nss <- cos(terr$aspect* pi / 180) # "Northness (aspect)" # convert to radians for cos/sin functions
Ess <- sin(terr$aspect* pi / 180)  # eastness
hist(terr$aspect)
hist(Ess)
system.time(
twi30 <- dynatopmodel::upslope.area(be_r30, atb = T)
)
twi30
save(twi30, file = file.path(gis_out, "twi.rdata"))
c250 <- ceiling(prod(dim(r250m))/2)
c500 <- ceiling(prod(dim(r500m))/2)
c1k <- ceiling(prod(dim(r1k))/2)
TPI250 <- focal(be_r30, w=r250m, fun=function(x, ...) x[c250] - sum(x[-c250], ...)/sum(!is.na(x[-c250]), ...),
rm.na = T, pad=TRUE, padValue=0,
filename = file.path(gis_out, "r_utm/tpi250.tif"), datatype = "FLT4S", overwrite = T)
TPI500 <- focal(be_r30, w=r500m, fun=function(x, ...) x[c500] - sum(x[-c500], ...)/sum(is.na(x[-c500]), ...),
rm.na = T, pad=TRUE, padValue=0)
TPI1k <- focal(be_r30, w=r1k, fun=function(x, ...) x[c1k] - sum(x[-c1k], ...)/sum(is.na(x[-c1k]), ...),
rm.na = T, pad=TRUE, padValue=0)
warnings()
terr30 <- stack(be_r30, terr, Nss, Ess, twi$atb, TPI250, TPI500, TPI1k)
terr30 <- stack(be_r30, terr, Nss, Ess, twi30$atb, TPI250, TPI500, TPI1k)
terr
terr30.names <- c("be30","tri30","slope30","aspect30","Nss30","Ess30","twi30", "tpi250", "tpi500", "tpi1k")
names(terr30) <- terr30.names
writeRaster(terr30, bylayer = T, filename = file.path(gis_out, "r_utm/terr30.tif"),
datatype = "FLT4S", suffix = "names", overwrite = TRUE)
save(terr30, terr30.names, file = file.path(gis_out, "terr30.rdata"))
std <- brick(file.path(gis_in, "gee/stdDev.tif"))
qnt <- brick(file.path(gis_in, "gee/quantiles.tif"))
cld <- brick(file.path(gis_in, "gee/leastCloud2.tif"))
# set NA value
NAvalue(std) <- -9999
NAvalue(qnt) <- -9999
NAvalue(cld) <- -9999
std
names(std)
names(qnt)
names(cld)
cellStats(std$ndvi_stdDev, range)
NAvalue(cld)
cellStats(cld$LC08_045029_20180726_B2, range)
# crop to raster template
std
r30
std <- raster::crop(std, r30)
qnt <- raster::crop(qnt, r30)
cld <- raster::crop(cld, r30)
extent(r30) == extent(std)
sum(values(std[["savi_stdDev"]])>0.5, na.rm = T)
hist(values(std[["savi_stdDev"]])[values(std[["savi_stdDev"]])<=0.5])
annualStack <- raster::stack(std[[c("ndmi_stdDev", "nbr_stdDev")]],
qnt[[c("ndvi_p5", "ndvi_p50", "ndvi_p95",
"ndmi_p5", "ndmi_p50", "ndmi_p95")]])
annualStack
plot(annualStack)
annualL <- as.list(annualStack)
focalL <- lapply(annualL, function(x) {
nm <- names(x)
tmp100 <- focal(x, w = r100m, fun = f3, na.rm = TRUE, pad = TRUE)
tmp250 <- focal(x, w = r250m, fun = f3, na.rm = TRUE, pad = TRUE)
tmp500 <- focal(x, w = r500m, fun = f3, na.rm = TRUE, pad = TRUE)
tmp <- stack(tmp100, tmp250, tmp500)
names(tmp) <- paste0(nm, c("_r100", "_r250", "_r500"))
tmp
#as.list(tmp)
})
annualFocal <- stack(unlist(lapply(focalL, as.list)))
names(annualFocal)
annualStack <- addLayer(annualFocal, cld[[c("LC08_045029_20180726_B1", "LC08_045029_20180726_B3"
,"LC08_045029_20180726_B4","LC08_045029_20180726_B5",
"LC08_045029_20180726_B7","LC08_045029_20180726_B10")]])
annual.names <- names(annualStack)
save(annualStack, annual.names, file = file.path(gis_out, "annualStack.rdata"))
writeRaster(annualStack, bylayer = T, filename = file.path(gis_out, "r_utm/annual.tif"),
datatype = "FLT4S", suffix = "names", overwrite = TRUE)
getwd()
gis_in <- "J:/UEA/Oregon/gis/raw_gis_data"
gis_out <- "J:/UEA/Oregon/gis/processed_gis_data"
load(file.path(gis_out, "be_ht_rdata"))
load(file.path(gis_out, "cut_stack.rdata"))
load(file.path(gis_out, "terr30.rdata"))
load(file.path(gis_out, "lidarStack.rdata"))
load(file.path(gis_out, "admStck.rdata"))
load(file.path(gis_out, "annualStack.rdata"))
load(file.path(gis_out, "tp.rdata"))
allStck <- stack(be_ht, cutStack, terr30, lidarStck, admStack, annualStack, tp_r30)
all.names <- names(allStck)
all.names
gt4_r500 <- raster(file.path(gis_out, "r_utm/gt4_r30_r500.tif"))
gt4_r250 <- raster(file.path(gis_out, "r_utm/gt4_r30_r250.tif"))
ht_r30 <- raster(file.path(gis_out, "r_utm/ht_r30.tif"))
ht_gt4_r30 <- raster(file.path(gis_out, "r_utm/ht_gt4_r30.tif"))
be_ht <- stack(ht_r30, ht_gt4_r30, gt4_r250, gt4_r500)
names(be_ht)
be_ht.names <- c("ht30", "gt4_r30", "gt4_250", "gt4_500")
names(be_ht) <- be_ht.names
be_ht[[1]]
save(be_ht, be_ht.names, file = file.path(gis_out, "be_ht_rdata"))
load(file.path(gis_out, "be_ht_rdata"))
allStck <- stack(be_ht, cutStack, terr30, lidarStck, admStack, annualStack, tp_r30)
all.names <- names(allStck)
all.names
writeRaster(allStck, bylayer = F, filename = file.path(gis_out, "r_utm/allStack.tif"))
rm(be_ht, cutStack, terr30, lidarStck, admStack, annualStack, tp_r30,
adm.names, annual.names, be_ht.names, cut.names, lid.names, terr30.names, tp.names, all.names)
save(all.names, allStck, file = file.path(gis_out, "allStack.rdata"))
all.names <- names(allStck)
all.names
save(all.names, allStck, file = file.path(gis_out, "allStack.rdata"))
gis_in <- "J:/UEA/Oregon/gis/raw_gis_data"
gis_out <- "J:/UEA/Oregon/gis/processed_gis_data"
load(file.path(gis_out, "allNames.rdata"))
load(file.path(gis_out, "allStack.rdata"))
allStack[[1]]
allStck[[1]]
save(all.names, file = file.path(gis_out, "allNames.rdata"))
allBrck <- brick(file.path(gis_out, "r_utm/allStack.tif"))
load(file.path(gis_out, "allNames.rdata"))
allBrck
names(allBrck) <- all.names
allBrck
rm(all.names)
load(file.path(gis_out, "sample_sites.rdata"))
utm10N <- 32610
# EPSG:26910  NAD83 / UTM zone 10N
nadutm10 <- 26910
dir(gis_in)
samtoolsfilter <- "F2308" # F2308 filter only
samtoolsqual <- "q48"
minimaprundate <- 20200929
kelpierundate <- 20200927
primer <- "BF3BR2"
gitHub <- "https://raw.githubusercontent.com/dougwyu/HJA_analyses_Kelpie/master/Kelpie_maps"
outputidxstatstabulatefolder <- paste0("outputs_minimap2_",minimaprundate,"_",samtoolsfilter,"_",
samtoolsqual, "_kelpie", kelpierundate,"_", primer,"_vsearch97")
datFile <- paste0("sample_by_species_table_", samtoolsfilter, "_minimap2_", minimaprundate,"_kelpie",
kelpierundate,"_uncorr.csv")
otuenv <- read.csv(file.path(gitHub, outputidxstatstabulatefolder, datFile))
otuenv[1:6,1:10]
coords <- unique(otuenv[,c("SiteName", "UTM_E", "UTM_N")])
xy.sf <- st_as_sf(coords, coords = c("UTM_E", "UTM_N"), crs = nadutm10)
rm(gitHub, otuenv, outputidxstatstabulatefolder, datFile, primer,
kelpierundate, minimaprundate, samtoolsfilter, samtoolsqual)
# transform to wgs utm to match rasters
xy.utm <- st_transform(xy.sf, crs = utm10N)
rm(xy.sf)
length(unique(xy.utm$SiteName))
# write
st_write(xy.utm, file.path(gis_out, "s_utm/sample_sites_utm10.shp"), delete_layer = T)
st_write(xy.utm, file.path(gis_out, "s_utm/sample_sites_utm10.kml"), delete_layer = T)
save(xy.utm, file = file.path(gis_out, "sample_sites.rdata"))
load(file.path(gis_out, "sample_sites.rdata"))
load(file.path(gis_out, "be_ht.rdata"))
be_ht
env.vars <- extract(allBrck, xy.utm)
head(env.vars)
env.vars[, "insideHJA"] <- ifelse(is.na(env.vars[, "insideHJA"]), "no", "yes")
env.vars <- data.frame(extract(allBrck, xy.utm))
head(env.vars)
env.vars$insideHJA <- ifelse(is.na(env.vars$insideHJA, "no", "yes")
env.vars$insideHJA <- ifelse(is.na(env.vars$insideHJA), "no", "yes")
env.vars$insideHJA <- factor(env.vars$insideHJA, levels = c("no", "yes"))
str(env.vars)
summary(env.vas)
summary(env.vars)
load(file.path(gis_out, "commonExtent.rdata")) # ext
gis_in <- "J:/UEA/Oregon/gis/raw_gis_data"
gis_out <- "J:/UEA/Oregon/gis/processed_gis_data"
load(file.path(gis_out, "commonExtent.rdata")) # ext
r30 <- raster(ext, res = c(30,30), crs = prj4.utm10)
prj4.utm10 <- "+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs" #same as above for raster (but now also accepts epsg)
r30 <- raster(ext, res = c(30,30), crs = prj4.utm10)
r1k <- ifelse(focalWeight(r30, d = 1000, type = "circle")>0, 1, NA)
sum(r1k, na.rm = T)
r500m <- ifelse(focalWeight(r30, d = 500, type = "circle")>0, 1, NA)
r250m <- ifelse(focalWeight(r30, d = 250, type = "circle")>0, 1, NA)
r100m <- ifelse(focalWeight(r30, d = 100, type = "circle")>0, 1, NA)
c250 <- ceiling(prod(dim(r250m))/2)
c500 <- ceiling(prod(dim(r500m))/2)
c1k <- ceiling(prod(dim(r1k))/2)
r250m[c250]
TPI250 <- focal(be_r30, w=r250m,
fun=function(x, na.rm) x[c250] - sum(x[-c250], na.rm = na.rm)/sum(!is.na(x[-c250]), na.rm = na.rm),
rm.na = T, pad=TRUE, padValue=0)
be_r30 <- raster(file.path(gis_out, "r_utm/be_r30.tif"))
TPI250 <- focal(be_r30, w=r250m,
fun=function(x, na.rm) x[c250] - sum(x[-c250], na.rm = na.rm)/sum(!is.na(x[-c250]), na.rm = na.rm),
rm.na = T, pad=TRUE, padValue=0)
TPI250 <- focal(be_r30, w=r250m,
fun=function(x, na.rm) x[c250] - sum(x[-c250], na.rm = na.rm)/sum(!is.na(x[-c250]), na.rm = na.rm),
na.rm = T, pad=TRUE, padValue=0)
TPI250_2 <- focal(be_r30, w=r250m,
fun=function(x, ...) x[c250] - sum(x[-c250], ...)/sum(!is.na(x[-c250]), ...),
na.rm = T, pad=TRUE, padValue=0)
plot(stack(TPI250, TPI250_2))
TPI250_2 <- focal(be_r30, w=r250m,
fun=function(x, ...) x[c250] - sum(x[-c250], ...)/sum(!is.na(x[-c250]), ...),
na.rm = T, pad=TRUE)
plot(stack(TPI250, TPI250_2))
plot(be_r30)
TPI250_2 <- focal(be_r30, w=r250m,
fun=function(x, na.rm) x[c250] - sum(x[-c250], na.rm = na.rm)/sum(!is.na(x[-c250]), na.rm = na.rm),
na.rm = T, pad=TRUE)
plot(stack(be_r30, TPI250_2))
TPI250 <- focal(be_r30, w=r250m,
fun=function(x, na.rm) x[c250] - sum(x[-c250], na.rm = na.rm)/sum(!is.na(x[-c250]), na.rm = na.rm),
na.rm = T, pad=TRUE)
identical(values(TPI250_2), values(TPI250))
TPI500 <- focal(be_r30, w=r500m,
fun=function(x, ...) x[c500] - sum(x[-c500], ...)/sum(is.na(x[-c500]), ...),
na.rm = T, pad=TRUE)
TPI1k <- focal(be_r30, w=r1k,
fun=function(x, ...) x[c1k] - sum(x[-c1k], ...)/sum(is.na(x[-c1k]), ...),
na.rm = T, pad=TRUE)
plot(stack(be_r30, TPI250, TPI500, TPI1k))
TPI500 <- focal(be_r30, w=r500m,
fun=function(x, ...) x[c500] - sum(x[-c500], ...)/sum(!is.na(x[-c500]), ...),
na.rm = T, pad=TRUE)
TPI1k <- focal(be_r30, w=r1k,
fun=function(x, ...) x[c1k] - sum(x[-c1k], ...)/sum(!is.na(x[-c1k]), ...),
na.rm = T, pad=TRUE)
plot(stack(be_r30, TPI250, TPI500, TPI1k))
terr <- raster::terrain(be_r30, opt = c("slope", "aspect", "TRI"), unit= "degrees")
Nss <- cos(terr$aspect* pi / 180) # "Northness (aspect)" # convert to radians for cos/sin functions
Ess <- sin(terr$aspect* pi / 180)  # eastness
twi30 <- dynatopmodel::upslope.area(be_r30, atb = T)
terr30 <- stack(be_r30, terr, Nss, Ess, twi30$atb, TPI250, TPI500, TPI1k)
terr30.names <- c("be30","tri30","slope30","aspect30","Nss30","Ess30","twi30", "tpi250", "tpi500", "tpi1k")
names(terr30) <- terr30.names
writeRaster(terr30, bylayer = T, filename = file.path(gis_out, "r_utm/terr30.tif"),
datatype = "FLT4S", suffix = "names", overwrite = TRUE)
save(terr30, terr30.names, file = file.path(gis_out, "terr30.rdata"))
gc()
getwd()
gis_in <- "J:/UEA/Oregon/gis/raw_gis_data"
gis_out <- "J:/UEA/Oregon/gis/processed_gis_data"
load(file.path(gis_out, "be_ht.rdata"))
## 2 Cut
load(file.path(gis_out, "cut_stack.rdata"))
## 3. Topography
load(file.path(gis_out, "terr30.rdata"))
## 4. Lidar
load(file.path(gis_out, "lidarStack.rdata"))
## 5. Streams/Roads
load(file.path(gis_out, "admStck.rdata"))
## 6. Annual indices
load(file.path(gis_out, "annualStack.rdata"))
## 7. Temperature
load(file.path(gis_out, "tp.rdata"))
allStck <- stack(be_ht, cutStack, terr30, lidarStck, admStack, annualStack, tp_r30)
all.names <- names(allStck)
all.names
writeRaster(allStck, bylayer = F, filename = file.path(gis_out, "r_utm/allStack.tif"), overwrite = TRUE)
save(all.names, file = file.path(gis_out, "allNames.rdata"))
rm(be_ht, cutStack, terr30, lidarStck, admStack, annualStack, tp_r30,
adm.names, annual.names, be_ht.names, cut.names, lid.names, terr30.names, tp.names, all.names)
allBrck <- brick(file.path(gis_out, "r_utm/allStack.tif"))
load(file.path(gis_out, "allNames.rdata"))
names(allBrck) <- all.names
allBrck
rm(all.names)
load(file.path(gis_out, "sample_sites.rdata"))
xy.utm
env.vars <- data.frame(extract(allBrck, xy.utm))
env.vars$SiteName <- xy.utm$SiteName
head(env.vars)
env.vars$insideHJA <- ifelse(is.na(env.vars$insideHJA), "no", "yes")
env.vars$insideHJA <- factor(env.vars$insideHJA, levels = c("no", "yes"))
str(env.vars)
env.vars <- data.frame(SiteName = xy.utm$SiteName, extract(allBrck, xy.utm))
head(env.vars)
env.vars$insideHJA <- ifelse(is.na(env.vars$insideHJA), "no", "yes")
env.vars$insideHJA <- factor(env.vars$insideHJA, levels = c("no", "yes"))
str(env.vars)
summary(env.vars)
save(env.vars, file = file.path(gis_out, "envVars.rdata"))
getwd()
save(env.vars, file = file.path("Hmsc_CD/oregon_ada/data", "envVars.rdata"))
load(file.path(gis_out, "envVars.rdata"))
gis_out <- "J:/UEA/Oregon/gis/processed_gis_data"
load(file.path(gis_out, "envVars.rdata"))
save(env.vars, file = file.path("Hmsc_CD/oregon_ada/data", "envVars.rdata"))
setwd("J:/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
load("data/envVars.rdata")
allVars <- env.vars
save(allVars, file = file.path(gis_out, "envVars.rdata"))
save(allVars, file = file.path("Hmsc_CD/oregon_ada/data", "envVars.rdata"))
save(allVars, file = file.path("data", "envVars.rdata"))
load("data/envVars.rdata")
getwd() # always run sub from oregon_ada
library(dplyr)
resFolder <-"code_sjSDM/r20210422a/results"
if(!dir.exists(resFolder)) dir.create(resFolder, recursive = TRUE)
abund <- "pa"
spChoose <- "M1"
device <- "gpu"
iter <- 170L
sampling <- 5000L
## Number of samples from tuning grid - random search
noSteps <- 1000
# no of CV folds
k <- 5
samtoolsfilter <- "F2308" # F2308 filter only
samtoolsqual <- "q48"
minimaprundate <- 20200929
kelpierundate <- 20200927
primer <- "BF3BR2"
gitHub <- "https://raw.githubusercontent.com/dougwyu/HJA_analyses_Kelpie/master/Kelpie_maps"
outputidxstatstabulatefolder <- paste0("outputs_minimap2_",
minimaprundate,"_",
samtoolsfilter,"_",
samtoolsqual,
"_kelpie",
kelpierundate,
"_",
primer,
"_vsearch97")
datFile <- paste0("sample_by_species_table_",
samtoolsfilter,
"_minimap2_",
minimaprundate,
"_kelpie",
kelpierundate,
"_FSL_qp.csv")
# file path:
fn <- file.path(gitHub, outputidxstatstabulatefolder, datFile)
# what file am i using?
basename(fn)
# when was it modified? - only if stored locally.
file.mtime(fn)
# read complete data set
otuenv <- read.csv(fn, stringsAsFactors = FALSE, na.strings = "NA")
# keep OTUs with >= minocc incidences AND with presnece at both M1 or M2
minocc <- 6 # set to high number (e.g. 20) for testing
## get Species columns by M1 and M2, with minocc calculated per trap
spM <- otuenv %>%
dplyr::filter(period == "S1") %>%
dplyr::select(SiteName, trap, contains("__")) %>%
tidyr::pivot_longer(cols = contains("__"), names_to = "OTU", values_drop_na = FALSE) %>%
mutate(value = value>0) %>% # change to PA
group_by(OTU, trap) %>%
summarise(nSites = sum(value, na.rm = T)) %>% # Number of sites at which present
filter(nSites >= minocc) %>% # filter by minocc
ungroup() %>%
tidyr::pivot_wider(names_from = trap, values_from = nSites, values_fn = function(x) sum(x)>0) %>%
filter(M1) %>% # CHOOOSE HERE FOR SINGLE. OR SHARED TRAP SPECIES GFROUP: filter(M1 & M2)
select(OTU)
otu.qp.csv <- otuenv %>%
dplyr::filter(period == "S1" & trap == "M1") %>%
dplyr::select(spM$OTU) ##
# convert to presence/absence data
otu.pa.csv <- otu.qp.csv
otu.pa.csv[otu.pa.csv > 0] <- 1
min(colSums(otu.pa.csv)) >= minocc # should be TRUE
# clean up
rm(datFile, gitHub, kelpierundate, minimaprundate, outputidxstatstabulatefolder, primer, samtoolsfilter, samtoolsqual, fn, spM)
# remove OTUs, XY, and normalised NDVI and EVI
load("data/envVars.rdata")
env.vars <- otuenv %>%
dplyr::filter(period == "S1" & trap == "M1") %>%
dplyr::select(trap, period, UTM_E, UTM_N, SiteName) %>%
mutate(uniqueID = paste(SiteName, trap, period, sep = "_"))
head(env.vars)
env.vars <- otuenv %>%
dplyr::filter(period == "S1" & trap == "M1") %>%
dplyr::select(trap, period, UTM_E, UTM_N, SiteName) %>%
mutate(uniqueID = paste(SiteName, trap, period, sep = "_")) %>%
left_join(y = allVars, by = SiteName)
head(allVars)
env.vars <- otuenv %>%
dplyr::filter(period == "S1" & trap == "M1") %>%
dplyr::select(trap, period, UTM_E, UTM_N, SiteName) %>%
mutate(uniqueID = paste(SiteName, trap, period, sep = "_")) %>%
left_join(y = allVars, by = "SiteName")
head(env.vars)
env.vars <- otuenv %>%
dplyr::filter(period == "S1" & trap == "M1") %>%
dplyr::select(trap, period, UTM_E, UTM_N, SiteName) %>%
mutate(uniqueID = paste(SiteName, trap, period, sep = "_")) %>%
left_join(y = allVars, by = "SiteName") %>%
mutate(lg_DistStream = log(DistStream + 0.001),
lg_DistRoad = log(DistRoad + 0.001),
lg_cover2m_max = log(l_Cover_2m_max + 0.001),
lg_cover2m_4m = log(l_Cover_2m_4m + 0.001),
lg_cover4m_16m = log(l_Cover_4m_16m + 0.001))
head(env.vars)
cat(paste(colnames(env.vars), collapse = '", "'))
varsName <- "vars5"
vars <- c("ht30", "gt4_r30", "gt4_500", "cut_r500", "cut_r250", "cut40_r500", "cut40_r250", "be30", "tri30", "slope30", "Nss30", "Ess30", "twi30", "tpi250", "tpi500", "tpi1k", "l_rumple", "insideHJA", "ndmi_stdDev_r100", "nbr_stdDev_r100", "ndvi_p5_r100", "ndvi_p50_r100", "ndvi_p95_r100", "ndmi_p5_r100", "ndmi_p50_r100", "ndmi_p95_r100", "LC08_045029_20180726_B1", "LC08_045029_20180726_B3", "LC08_045029_20180726_B4", "LC08_045029_20180726_B5", "LC08_045029_20180726_B7", "LC08_045029_20180726_B10", "minT_annual", "precipitation_mm", "lg_DistStream", "lg_DistRoad", "lg_cover2m_max", "lg_cover2m_4m", "lg_cover4m_16m")
indNA <- complete.cases(env.vars[,vars])
sum(indNA)
pairs(env.vars[,vars])
save(otu.pa.csv, otu.qp.csv, otuenv, env.vars,
k, minocc, noSteps, vars, varsName, abund, device, iter, sampling,
file = file.path(resFolder, paste0("modelData_",abund,".rdata")))
res <- read.csv(file.path("r20210401a/results", "manual_tuning_sjsdm_5CV_M1S1_mean_AUC_pa_min_5_nSteps_1000.csv"))
res <- read.csv(file.path("r20210401a/results", "manual_tuning_sjsdm_vars3_5CV_M1S1_meanEVAL_pa_min6_nSteps1000.csv"))
setwd("J:/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
file.path("r20210401a/results", "manual_tuning_sjsdm_vars3_5CV_M1S1_meanEVAL_pa_min6_nSteps1000.csv")
res <- read.csv(file.path("code_sjSDM/r20210401a/results", "manual_tuning_sjsdm_vars3_5CV_M1S1_meanEVAL_pa_min6_nSteps1000.csv"))
head(res)
res.best <- res[which.max(res$AUC.test_mean),,drop = T]
res.best
resFolder <-"code_sjSDM/r20210422b/results"
abund <- "pa"
## load model data
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
