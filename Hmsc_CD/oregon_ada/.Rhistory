(samples_list * thin_list) + ceiling(0.5*thin_list*samples_list)
setwd("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
library(dplyr)
resFolder <-"code_sjSDM/r20210616a/results"
abund <- "pa"
## load model data
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
dir(resFolder)
resFolder <-"code_sjSDM/r20210616a/results"
abund <- "pa"
## load model data
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
head(env.vars)
dir(resFolder)
resFolder <-"code_sjSDM/r20210610a/results"
abund <- "pa"
dir(resFolder)
## load model data
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
head(env.vars)
## load model data
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
setwd("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada)
resFolder <-"code_sjSDM/r20210610a/results"
abund <- "pa"
dir(resFolder)
resFolder <-"code_sjSDM/r20210610a/results"
abund <- "pa"
dir(resFolder)
## load model data
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
head(env.vars)
res <- read.csv(file.path(resFolder,paste0("manual_tuning_sjsdm_", varsName, "_", k, "CV_", spChoose,
"_meanEVAL_",
abund,
"_min",
minocc,
"_nSteps",
noSteps,
".csv")))
head(res)
res.best <- res[which.max(res$AUC.test_mean),,drop = T]
res.best
rm(res)
setwd("J:/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
library(mvabund)
library(ecoCopula)
gis_out <- "J:/UEA/Oregon/gis/processed_gis_data"
baseFolder <- "code_sjSDM/r20210610a"
resFolder <- file.path(baseFolder, "results")
plotsFolder <- file.path(baseFolder, "plots")
setwd("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
baseFolder <- "code_sjSDM/r20210610a"
resFolder <- file.path(baseFolder, "results")
plotsFolder <- file.path(baseFolder, "plots")
abund <- "pa"
# load model data - for species classification
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
rm(env.vars, k, noSteps, vars, device, iter, sampling, otuenv)
## load species AUC resutls for filtering
load(file.path(resFolder, "sp_results.rdata")) # sp.mn.test
rm(eval.results, sp.mn.train, sp.res.test, sp.res.train)
## Mean AUC per species (and other eval metrics)
str(sp.mn.test, max.level = 1)
head(sp.mn.test$auc)
## Filter species by auc
auc.filt <- 0.65
# threshold for presence absence data
tr <- 0.5
# how many species after AUC filter?
sum(sp.mn.test$auc > auc.filt)
# incidence
incidence <- colSums(otu.pa.csv)/nrow(otu.pa.csv)
load(file.path(gis_out, "r_oversize", paste0("sjSDM_predictions_", "M1S1_", "min", minocc, "_", varsName, "_", abund, ".rdata")))
gis_out <- "D:/CD/UEA/Oregon/gis/processed_gis_data"
load(file.path(gis_out, "r_oversize", paste0("sjSDM_predictions_", "M1S1_", "min", minocc, "_", varsName, "_", abund, ".rdata")))
dim(pred.mn)
## filter for species performance
pred.in <- pred.mn[,sp.mn.test$auc > auc.filt]
dim(pred.in)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.in)
library(mvabund)
install.packages("mvabund")
install.packages("ecoCopula")
library(mvabund)
library(ecoCopula)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.in)
pred.pa <- mvabund::mvabund((pred.in >= tr)*1)
# pred.prob[1:10, 1:10]
pred.pa[1:10, 1:10]
hist(log(colSums(pred.pa)))
pred.prob[1:10, 1:10]
## testing
ns <- 1:nrow(pred.in)
setwd("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
library(mvabund)
library(ecoCopula)
gis_out <- "D:/CD/UEA/Oregon/gis/processed_gis_data"
baseFolder <- "code_sjSDM/r20210610a"
resFolder <- file.path(baseFolder, "results")
plotsFolder <- file.path(baseFolder, "plots")
if(!dir.exists(plotsFolder)) dir.create(plotsFolder, recursive = TRUE)
abund <- "pa"
# load model data - for species classification
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
rm(env.vars, k, noSteps, vars, device, iter, sampling, otuenv)
## load species AUC resutls for filtering
load(file.path(resFolder, "sp_results.rdata")) # sp.mn.test
rm(eval.results, sp.mn.train, sp.res.test, sp.res.train)
## Mean AUC per species (and other eval metrics)
str(sp.mn.test, max.level = 1)
head(sp.mn.test$auc)
## Filter species by auc
auc.filt <- 0.65
# threshold for presence absence data
tr <- 0.5
# how many species after AUC filter?
sum(sp.mn.test$auc > auc.filt)
# incidence
incidence <- colSums(otu.pa.csv)/nrow(otu.pa.csv)
load(file.path(resFolder, paste0("sjSDM_predictions_", "M1S1_", "min", minocc, "_", varsName, "_", abund, ".rdata"))) # pred.mn, pred.sd,
load(file.path(gis_out, "r_oversize", paste0("sjSDM_predictions_", "M1S1_", "min", minocc, "_", varsName, "_", abund, ".rdata")))
## filter for species performance
pred.in <- pred.mn[,sp.mn.test$auc > auc.filt]
dim(pred.in)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.in)
pred.pa <- mvabund::mvabund((pred.in >= tr)*1)
# reduce data set for testing
smp <- 1:nrow(pred.in)
# reduce data set for testing
smp <- 1:nrow(pred.in) %/%100
# reduce data set for testing
smp <- 1:nrow(pred.in)
1:50 %% 5
1:50 %/% 5
smp <- 1:50
seq(1, length(smp), 5)
smp <- seq(1, nrow(pred.in), rFact)
smp <- seq(1, nrow(pred.in), rFact)
# reduce data set for testing
rFact <- 100
smp <- seq(1, nrow(pred.in), rFact)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.in)
pred.in <- pred.in[smp, ]
dim(pred.in)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.in)
pred.pa <- mvabund::mvabund((pred.in >= tr)*1)
pred.prob[1:10, 1:10]
pred.pa[1:10, 1:10]
# do glm model
mod.pa <- mvabund::manyglm(pred.pa~1, family = binomial(link="cloglog"))
# do ordination
mod.pa.ord <- ecoCopula::cord(mod.pa)
# reduce data set for testing
rFact <- 1000
## filter for species performance
pred.in <- pred.mn[,sp.mn.test$auc > auc.filt]
dim(pred.in)
# reduce data set for testing
rFact <- 1000
smp <- seq(1, nrow(pred.in), rFact)
pred.mod <- pred.in[smp, ]
dim(pred.mod)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.mod)
pred.pa <- mvabund::mvabund((pred.mod >= tr)*1)
pred.prob[1:10, 1:10]
pred.pa[1:10, 1:10]
# do glm model
mod.pa <- mvabund::manyglm(pred.pa~1, family = binomial(link="cloglog"))
mod.prob <- mvabund::manyglm(pred.prob~1, family = binomial(link="cloglog"))
# do ordination
mod.pa.ord <- ecoCopula::cord(mod.pa)
## load raster templates
load(file.path(gis_out, "templateRaster.rdata")) ## r, indNA aoi.pred.sf, r.aoi.pred - reduced area for plotting
library(raster)
install.packages("raster")
library(raster)
## load raster templates
load(file.path(gis_out, "templateRaster.rdata")) ## r, indNA aoi.pred.sf, r.aoi.pred - reduced area for plotting
# ## make site scores into raster
rSites.pa <- r.msk
rSites.pa[indNA][smp] <- mod.pa.ord$scores[,"Factor1"]
rSites.pa
plot(rSites.pa)
# ## make site scores into raster
rSites.pa <- raster(r.msk)
rSites.pa[indNA][smp] <- mod.pa.ord$scores[,"Factor1"]
rSites.pa[] <- NA
rSites.pa[indNA][smp] <- mod.pa.ord$scores[,"Factor1"]
rSites.pa
plot(rSites.pa)
# ## make site scores into raster
rSites.pa <- r.msk
rSites.pa
rSites.pa[indNA] <- pred.in
dim(pred.in)
# ## make site scores into raster
rSites.pa <- r.msk
rSites.pa
indNA
sum(indNA)
spp <- data.frame(species = colnames(get(paste0("otu.", abund, ".csv")))) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_", convert = TRUE) %>%  ## creates real NAs with convert = T
mutate(best.name = case_when(is.na(epithet) & is.na(genus) & is.na(family) & is.na(order) ~ class,
is.na(epithet) & is.na(genus) & is.na(family) ~ order,
is.na(epithet) & is.na(genus) ~ family,
is.na(epithet) ~ genus,
TRUE ~ paste(genus, epithet, sep = "_")
)) %>%
dplyr::select(-empty)%>%
mutate(auc = sp.mn.test$auc,
incidence = incidence)
head(spp)
library(dplyr)
install.packages("dplyr")
spp <- data.frame(species = colnames(get(paste0("otu.", abund, ".csv")))) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_", convert = TRUE) %>%  ## creates real NAs with convert = T
mutate(best.name = case_when(is.na(epithet) & is.na(genus) & is.na(family) & is.na(order) ~ class,
is.na(epithet) & is.na(genus) & is.na(family) ~ order,
is.na(epithet) & is.na(genus) ~ family,
is.na(epithet) ~ genus,
TRUE ~ paste(genus, epithet, sep = "_")
)) %>%
dplyr::select(-empty)%>%
mutate(auc = sp.mn.test$auc,
incidence = incidence)
library(dplyr)
spp <- data.frame(species = colnames(get(paste0("otu.", abund, ".csv")))) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_", convert = TRUE) %>%  ## creates real NAs with convert = T
mutate(best.name = case_when(is.na(epithet) & is.na(genus) & is.na(family) & is.na(order) ~ class,
is.na(epithet) & is.na(genus) & is.na(family) ~ order,
is.na(epithet) & is.na(genus) ~ family,
is.na(epithet) ~ genus,
TRUE ~ paste(genus, epithet, sep = "_")
)) %>%
dplyr::select(-empty)%>%
mutate(auc = sp.mn.test$auc,
incidence = incidence)
install.packages("tidyr")
spp <- data.frame(species = colnames(get(paste0("otu.", abund, ".csv")))) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_", convert = TRUE) %>%  ## creates real NAs with convert = T
mutate(best.name = case_when(is.na(epithet) & is.na(genus) & is.na(family) & is.na(order) ~ class,
is.na(epithet) & is.na(genus) & is.na(family) ~ order,
is.na(epithet) & is.na(genus) ~ family,
is.na(epithet) ~ genus,
TRUE ~ paste(genus, epithet, sep = "_")
spp <- data.frame(species = colnames(get(paste0("otu.", abund, ".csv")))) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_", convert = TRUE) %>%  ## creates real NAs with convert = T
mutate(best.name = case_when(is.na(epithet) & is.na(genus) & is.na(family) & is.na(order) ~ class,
is.na(epithet) & is.na(genus) & is.na(family) ~ order,
is.na(epithet) & is.na(genus) ~ family,
is.na(epithet) ~ genus,
TRUE ~ paste(genus, epithet, sep = "_")
)) %>%
dplyr::select(-empty)%>%
mutate(auc = sp.mn.test$auc,
incidence = incidence)
head(spp)
spp <- data.frame(species = colnames(get(paste0("otu.", abund, ".csv")))) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_", convert = TRUE) %>%  ## creates real NAs with convert = T
mutate(best.name = case_when(is.na(epithet) & is.na(genus) & is.na(family) & is.na(order) ~ class,
is.na(epithet) & is.na(genus) & is.na(family) ~ order,
is.na(epithet) & is.na(genus) ~ family,
is.na(epithet) ~ genus,
TRUE ~ paste(genus, epithet, sep = "_")
)) %>%
dplyr::select(-empty)%>%
mutate(auc = sp.mn.test$auc,
incidence = incidence)
head(spp)
sum(is.na(spp$best.name))
sum(grepl("NA_NA", spp$best.name))
head(spp, 30)
sum(is.na(spp$family))
## filter for species performance
pred.in <- pred.mn[,sp.mn.test$auc > auc.filt]
dim(pred.in)
## get species names too
spp.in <- spp[sp.mn.test$auc > auc.filt, ]
head(spp.in)
rList <- lapply(data.frame(pred.in), function(x) {
tmp <- r.msk
tmp[indNA] <- x
tmp
})
rStack <- stack(rList)
names(rStack) <- spp.in$best.name
rStack
432955/9
661*655
432955/9
48106/655
rStack.agg <- raster::aggregate(rStack, 5)
rStack.agg
vals <- values(rStack.agg)
indNA2 <- complete.cases(vals)
sum(indNA2)
plot(rStack.agg, 1)
f <- 10
rStack.agg <- raster::aggregate(rStack, f)
rStack.agg
vals <- values(rStack.agg)
indNA2 <- complete.cases(vals)
sum(indNA2)
plot(rStack.agg, 1)
pred.mod <- values(rStack.agg)
indNA2 <- complete.cases(pred.mod)
sum(indNA2)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.mod[indNA2, ])
pred.pa <- mvabund::mvabund((pred.mod[indNA2, ] >= tr)*1)
pred.prob[1:10, 1:10]
pred.pa[1:10, 1:10]
dim(pred.pa)
f <- 50
rStack.agg <- raster::aggregate(rStack, f)
rStack.agg
plot(rStack.agg, 1)
pred.mod <- values(rStack.agg)
indNA2 <- complete.cases(pred.mod)
sum(indNA2)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.mod[indNA2, ])
pred.pa <- mvabund::mvabund((pred.mod[indNA2, ] >= tr)*1)
pred.prob[1:10, 1:10]
pred.pa[1:10, 1:10]
hist(log(colSums(pred.pa)))
# do glm model
mod.pa <- mvabund::manyglm(pred.pa~1, family = binomial(link="cloglog"))
# do ordination
mod.pa.ord <- ecoCopula::cord(mod.pa)
# ## make site scores into raster
rSites.pa <- raster(rStack.agg)
rSites.pa[] <- NA
rSites.pa[indNA2] <- mod.pa.ord$scores[,"Factor1"]
rSites.pa
plot(rSites.pa)
f <- 10
rStack.agg <- raster::aggregate(rStack, f)
rStack.agg
pred.mod <- values(rStack.agg)
indNA2 <- complete.cases(pred.mod)
sum(indNA2)
install.packages("ggplot2")
install.packages("sf")
f <- 10
rStack.agg <- raster::aggregate(rStack, f)
rStack.agg
pred.mod <- values(rStack.agg)
indNA2 <- complete.cases(pred.mod)
sum(indNA2)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.mod[indNA2, ])
pred.pa <- mvabund::mvabund((pred.mod[indNA2, ] >= tr)*1)
pred.prob[1:10, 1:10]
pred.pa[1:10, 1:10]
dim(pred.pa)
f <- 5
rStack.agg <- raster::aggregate(rStack, f)
rStack.agg
pred.mod <- values(rStack.agg)
indNA2 <- complete.cases(pred.mod)
sum(indNA2)
# make a pa matrix as mvabund object
pred.prob <- mvabund::mvabund(pred.mod[indNA2, ])
pred.pa <- mvabund::mvabund((pred.mod[indNA2, ] >= tr)*1)
pred.prob[1:10, 1:10]
pred.pa[1:10, 1:10]
dim(pred.pa)
load("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada/code_sJSDM/r20210610a/results/ecocop_res_f10.rdata")
plot(rSites.pa)
f <- 3
rStack.agg <- raster::aggregate(rStack, f)
rStack.agg
pred.mod <- values(rStack.agg)
indNA2 <- complete.cases(pred.mod)
sum(indNA2)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
load("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada/code_sJSDM/r20210627a/results/modelData_pa.rdata")
setwd("J:/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
library(dplyr)
resFolder <-"code_sjSDM/r20210627a/results"
abund <- "pa"
## load model data
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
set.seed(100)
# set variables from best tune
# formula.env = 'envDNN'
hidden <- list(c(50L,50L,10L), c(25L,25L,10L))
res <- read.csv(file.path(resFolder,paste0("manual_tuning_sjsdm_", varsName, "_", k, "CV_", spChoose,
"_meanEVAL_",
abund,
"_min",
minocc,
"_nSteps",
noSteps,
".csv")))
head(res)
res.best <- res[which.max(res$AUC.test_mean),,drop = T]
res.best
# Choose pa or qp reponse data and family
if(abund == "pa") {
Y <- otu.pa.csv
Y.test <- otu.pa.csv.test
family <- stats::binomial('probit') } else {
if(abund ==  "qp") {
Y <- otu.qp.csv
Y.test <- otu.qp.csv.test
family <- stats::poisson('log')
} else stop("check abund")
}
### 3. Do full model with validation data and test on test data
# select X data
env.train <- env.vars[, vars]
env.test <- env.vars.test[, vars]
file.path(resFolder,paste0("s-jSDM_final_model_",varsName, "_",spChoose, "_",abund, ".rds"))
setwd("J:/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
library(dplyr)
resFolder <-"code_sjSDM/r20210627a/results"
abund <- "pa"
## load model data
load(file.path(resFolder, paste0("modelData_",abund,".rdata")))
set.seed(100)
# set variables from best tune
# formula.env = 'envDNN'
hidden <- list(c(50L,50L,10L), c(25L,25L,10L))
res <- read.csv(file.path(resFolder,paste0("manual_tuning_sjsdm_", varsName, "_", k, "CV_", spChoose,
"_meanEVAL_",
abund,
"_min",
minocc,
"_nSteps",
noSteps,
".csv")))
head(res)
res.best <- res[which.max(res$AUC.test_mean),,drop = T]
res.best
load("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada/code_sJSDM/r20210627a/results/sp_test_results.rdata")
eval.results
sp.res.test
names <- colnames(sp.res.test[[1]])
str(sp.res.test, max.level = 2)
names <- colnames(sp.res.test)
rowMeans(sp.res.test)
plot(sp.res.test)
plot(sp.res.train$auc, sp.res.test$auc, xlim = c(0,1), ylim = c(0,1), xlab = "AUC train", ylab = "AUC test")
abline(0,1)
load("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada/code_sJSDM/r20210627a/results/sp_test_results.rdata")
eval.results
eval.results <- data.frame(type = NA,
loglike_sjSDM = NA,
loss= NA,
AUC = NA,
ll = NA,
nagel= NA,
plr = NA,
tjur = NA,
cor = NA,
auc.lt5= NA)
eval.results <- rbind(eval.results, eval.results)
eval.results
n <- 2
eval.results <- data.frame(type = rep(NA, n),
loglike_sjSDM = rep(NA, n),
loss=rep(NA, n),
AUC = rep(NA, n),
ll = rep(NA, n),
nagel= rep(NA, n),
plr = rep(NA, n),
tjur =rep(NA, n),
cor = rep(NA, n),
auc.lt5= rep(NA, n))
View(eval.results)
load("D:/CD/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada/code_sJSDM/r20210627a/results/sp_test_results.rdata")
ts
pdf(file.path(resFolder, "eval_metrics_pairs_test.pdf"))
plot(sp.res.test)
mtext("test")
dev.off()
pdf(file.path(resFolder, "eval_metrics_auc_test_train.pdf"))
plot(sp.res.train$auc, sp.res.test$auc, xlim = c(0,1), ylim = c(0,1), xlab = "AUC train", ylab = "AUC test")
abline(0,1)
dev.off()
eval.results
plot(sp.res.train$auc, sp.res.test$auc, xlim = c(0,1), ylim = c(0,1), xlab = "AUC train", ylab = "AUC test")
abline(0,1)
plot(sp.res.test)
